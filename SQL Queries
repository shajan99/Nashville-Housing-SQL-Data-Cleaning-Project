### Data cleaning of Nashville Housing data using SQL for making data more usable

SELECT *
FROM [Data Cleaning].[dbo].[NashvilleHousing]

--------------------------------------------------------------------------------------------------------

-- Standardize Date format

SELECT SaleDate, CONVERT(Date, SaleDate)
FROM [Data Cleaning].[dbo].[NashvilleHousing]

ALTER TABLE [Data Cleaning].[dbo].[NashvilleHousing]
Add SaleDateConverted Date;

UPDATE [Data Cleaning].[dbo].[NashvilleHousing]
SET SaleDateConverted = CONVERT(Date, SaleDate)

SELECT SaleDate, SaleDateConverted
FROM [Data Cleaning].[dbo].[NashvilleHousing]

--------------------------------------------------------------------------------------------------------

-- Populate Property Address data

SELECT PropertyAddress
FROM [Data Cleaning].[dbo].[NashvilleHousing]
WHERE PropertyAddress is NULL
-- 36 missing adresses

SELECT *
FROM [Data Cleaning].[dbo].[NashvilleHousing]
ORDER BY ParcelID
-- Each  PropertyAddress is associated with a unique ParcelID

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
FROM [Data Cleaning].[dbo].[NashvilleHousing] AS a
JOIN [Data Cleaning].[dbo].[NashvilleHousing] AS b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress is null
-- Selecting those entries where ParcelID is the same, referring to the same PropertyAddress
-- But where UniqueID is different, referring to different rows

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM [Data Cleaning].[dbo].[NashvilleHousing] AS a
JOIN [Data Cleaning].[dbo].[NashvilleHousing] AS b
	ON a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress is null
-- Using ISNULL to populate entries with missing PropertyAddress 

--------------------------------------------------------------------------------------------------------

-- Breaking PropertyAddress into individual columns (Address and City) using SUBSTRING

SELECT PropertyAddress
FROM [Data Cleaning].[dbo].[NashvilleHousing]

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as PropertySplitAddress
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as PropertySplitCity
FROM [Data Cleaning].[dbo].[NashvilleHousing]
-- These results are what the PropertyAddress column has to be split into

ALTER TABLE [Data Cleaning].[dbo].[NashvilleHousing]
ADD PropertySplitAddress Nvarchar(255);

UPDATE [Data Cleaning].[dbo].[NashvilleHousing]
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )

ALTER TABLE [Data Cleaning].[dbo].[NashvilleHousing]
ADD PropertySplitCity Nvarchar(255);

UPDATE [Data Cleaning].[dbo].[NashvilleHousing]
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))

--------------------------------------------------------------------------------------------------------

-- Breaking OwnerAddress into individual columns (Address, City, State) using PARSENAME

SELECT OwnerAddress
FROM [Data Cleaning].[dbo].[NashvilleHousing]

SELECT
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
FROM [Data Cleaning].[dbo].[NashvilleHousing]
-- PARSENAME only works with periods. Therefore the commas have to be replaced by periods
-- These results are what the OwnerAddress column has to be split into

ALTER TABLE [Data Cleaning].[dbo].[NashvilleHousing]
ADD OwnerSplitAddress Nvarchar(255);

UPDATE [Data Cleaning].[dbo].[NashvilleHousing]
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)

ALTER TABLE [Data Cleaning].[dbo].[NashvilleHousing]
ADD OwnerSplitCity Nvarchar(255);

UPDATE [Data Cleaning].[dbo].[NashvilleHousing]
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)

ALTER TABLE [Data Cleaning].[dbo].[NashvilleHousing]
ADD OwnerSplitState Nvarchar(255);

UPDATE [Data Cleaning].[dbo].[NashvilleHousing]
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)

--------------------------------------------------------------------------------------------------------

-- Change Y and N to Yes and No in "Sold as Vacant" column


SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM [Data Cleaning].[dbo].[NashvilleHousing]
GROUP BY SoldAsVacant
ORDER BY 2

UPDATE [Data Cleaning].[dbo].[NashvilleHousing]
SET SoldAsVacant = CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
	   WHEN SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END

--------------------------------------------------------------------------------------------------------

-- Remove Duplicates

-- Duplicates should never be removed from the original data
-- Use a Temp Table or CTE and remove the duplicates from there

WITH RowNumCTE AS
(
	SELECT *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) as row_num
FROM [Data Cleaning].[dbo].[NashvilleHousing]
)

SELECT *
FROM RowNumCTE
WHERE row_num > 1
ORDER BY PropertyAddress
-- These are the duplicates that have to be removed
-- Use DELETE instead of SELECT * to do so

--------------------------------------------------------------------------------------------------------

-- Delete irrelevant Columns

SELECT *
FROM [Data Cleaning].[dbo].[NashvilleHousing]

ALTER TABLE [Data Cleaning].[dbo].[NashvilleHousing]
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate


